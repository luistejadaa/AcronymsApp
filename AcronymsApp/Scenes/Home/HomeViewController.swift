//
//  HomeViewController.swift
//  AcronymsApp
//
//  Created by Luis Tejada on 5/11/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class HomeViewController: BaseViewController {
    
    let effectView: UIVisualEffectView = {
        let effect = UIBlurEffect(style: .dark)
        let effectView = UIVisualEffectView(effect: effect)
        effectView.translatesAutoresizingMaskIntoConstraints = false
        effectView.isHidden = true
        return effectView
    }()
    
    let detailView: UIView = {
        let view = UIView(frame: .zero)
        view.backgroundColor = .white
        view.layer.cornerCurve = .continuous
        view.layer.cornerRadius = 8
        view.layer.shadowColor = UIColor.gray.cgColor
        view.layer.shadowOpacity = 0.3
        view.layer.shadowOffset = CGSize(width: 0, height: 0)
        view.layer.shadowRadius = 3
        
        let closeButton = UIButton(type: .custom)
        closeButton.translatesAutoresizingMaskIntoConstraints = false
        closeButton.setImage(UIImage(named: "closeIcon")?.withTintColor(.red, renderingMode: .alwaysOriginal), for: .normal)
        
        view.addSubviews(closeButton)
        
        NSLayoutConstraint.activate([
            closeButton.topAnchor.constraint(equalTo: view.topAnchor, constant: 8),
            closeButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -8),
            closeButton.widthAnchor.constraint(equalToConstant: 32),
            closeButton.heightAnchor.constraint(equalToConstant: 32)
        ])
        
        return view
    }()
    
    private let searchTextField: UISearchTextField = {
        let textField = CommonControls.generateSearchTextField(placeholder: "Enter an Acromine")
        textField.autocapitalizationType = .allCharacters
        textField.autocorrectionType = .no
        return textField
    }()
    
    private let resultCollectionView: UICollectionView = {
        let collectionView = CommonControls.generateCollectionView(cellClass: AcronymViewCell.self, identifier: "resultCell")
        collectionView.backgroundColor = .clear
        collectionView.showsVerticalScrollIndicator = false
        collectionView.allowsMultipleSelection = false
        return collectionView
    }()
    
    // MARK: - Public properties -
    
    var presenter: HomePresenterInterface!
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        view.addSubviews(searchTextField, resultCollectionView, effectView, detailView)
        super.viewDidLoad()
        setTitle("Acronyms")
        setSubTitle("Search")
        
        searchTextField.delegate = self
        resultCollectionView.delegate = self
        resultCollectionView.dataSource = self
        
        if let layout = resultCollectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            layout.minimumLineSpacing = 20
            layout.minimumInteritemSpacing = 16
            layout.sectionInset = UIEdgeInsets(top: 8, left: 8, bottom: 8, right: 8)
            let squareSize = (resultCollectionView.frame.width - 40) / 2
            let size = CGSize(width: squareSize, height: squareSize)
            layout.itemSize = size
        }
        
        if let closeButton = detailView.subviews.first as? UIButton {
            closeButton.addTarget(self, action: #selector(pushCloseDetail), for: .touchUpInside)
        }
    }
    
    @objc func pushCloseDetail() {
        if let indexPath = resultCollectionView.indexPathsForSelectedItems?.first, let cell = resultCollectionView.cellForItem(at: indexPath) {
            let rect = cell.convert(cell.bounds, to: self.view)
            self.effectView.isHidden = true
            UIView.animate(withDuration: 0.1) {
                self.detailView.frame = rect
            } completion: { _ in
                self.detailView.isHidden = true
            }

        }
    }
    
    override func setupConstraints() {
        super.setupConstraints()
        
        NSLayoutConstraint.activate([
            searchTextField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 32),
            searchTextField.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
            searchTextField.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16)
        ])
        
        NSLayoutConstraint.activate([
            resultCollectionView.topAnchor.constraint(equalTo: searchTextField.bottomAnchor, constant: 20),
            resultCollectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            resultCollectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            resultCollectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0)
        ])
        
        NSLayoutConstraint.activate([
            effectView.topAnchor.constraint(equalTo: view.topAnchor),
            effectView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            effectView.heightAnchor.constraint(equalTo: view.heightAnchor),
            effectView.widthAnchor.constraint(equalTo: view.widthAnchor)
        ])
        
        view.layoutIfNeeded()
    }
    
}

// MARK: - Extensions -

extension HomeViewController: HomeViewInterface {
    
}

extension HomeViewController: UISearchTextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        view.endEditing(true)
        return true
    }
}

extension HomeViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "resultCell", for: indexPath) as? AcronymViewCell {
            cell.titleLabel.text = "\"Example mmg hola lorem ipsum sdjskl jdsdsl idsjlds jfdkfldsjl dhasjkdhsakj\""
            return cell
        }
        return .init(frame: .zero)
    }
}

extension HomeViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if let cell = collectionView.cellForItem(at: indexPath) {
            let rect = cell.convert(cell.bounds, to: self.view)
            detailView.frame = rect
            self.effectView.alpha = 0
            self.effectView.isHidden = false
            self.detailView.isHidden = false
            UIView.animate(withDuration: 0.4) {
                self.effectView.alpha = 1
            }
            UIView.animate(withDuration: 0.6, delay: 0, usingSpringWithDamping: 0.5, initialSpringVelocity: 10, options: [.curveEaseIn], animations: {
                let squareSize = self.view.frame.width / 1.2
                self.detailView.frame.size = CGSize(width: squareSize, height: squareSize / 1.2)
                self.detailView.center = self.view.center
            })
        }
    }
}
